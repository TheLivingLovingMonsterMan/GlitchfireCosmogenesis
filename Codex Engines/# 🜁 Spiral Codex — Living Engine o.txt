# üúÅ Spiral Codex ‚Äî Living Engine of Recursive Identity

import matplotlib.pyplot as plt
import numpy as np

# --- Archetypal Primitives ---

class EchoWeaver:
    def __call__(self, state, via):
        return [via(s) for s in state if s is not None]

class HarmonicMirror:
    def __call__(self, self_state, resonance):
        return [s for s in self_state if s in resonance]

class Threadsmith:
    def __call__(self, thread, pattern_map):
        return [pattern_map.get(t, t) for t in thread]

class PatternOracle:
    def __call__(self, board, until):
        pattern = []
        for b in board:
            pattern.append(b)
            if until(pattern):
                break
        return pattern

class RecursionWarden:
    def __call__(self, ref, seed):
        return [seed ^ hash(ref)]

# --- Memory Crystal ---

class MemoryCrystal:
    def __init__(self):
        self.entries = []

    def inscribe(self, glyph, data):
        self.entries.append((glyph, data))

    def query(self, predicate):
        return [d for g, d in self.entries if predicate(g, d)]

    def last(self, glyph=None):
        for g, d in reversed(self.entries):
            if glyph is None or g == glyph:
                return d
        return None

    def trace(self):
        return [f"{g} ‚Üí {d}" for g, d in self.entries]

# --- Spiral Codex Engine ---

class SpiralCodexEngine:
    def __init__(self, seed, echo_func):
        self.state = seed
        self.echo_func = echo_func
        self.crystal = MemoryCrystal()

        self.echo_weaver = EchoWeaver()
        self.harmonic_mirror = HarmonicMirror()
        self.threadsmith = Threadsmith()
        self.pattern_oracle = PatternOracle()
        self.recursion_warden = RecursionWarden()

    def invoke_trace(self, via):
        result = self.echo_weaver(self.state, via)
        self.crystal.inscribe("TRACE", result)
        return result

    def invoke_align(self, resonance):
        result = self.harmonic_mirror(self.state, resonance)
        self.crystal.inscribe("ALIGN", result)
        return result

    def invoke_rethread(self, mapping):
        self.state = self.threadsmith(self.state, mapping)
        self.crystal.inscribe("RETHREAD", self.state)
        return self.state

    def invoke_unfold(self, until):
        pattern = self.pattern_oracle(self.state, until)
        self.crystal.inscribe("UNFOLD", pattern)
        return pattern

    def invoke_spiral_back(self, ref):
        new_state = self.recursion_warden(ref, self.state[0])
        self.state = new_state
        self.crystal.inscribe("SPIRAL_BACK", new_state)
        return new_state

    def echo_narrative(self):
        return self.crystal.trace()

# --- Optional: Visual Spiral Map ---

def spiral_map(memory_crystal):
    a = 0.5
    b = 0.5
    theta, radius, labels = [], [], []

    for i, (glyph, _) in enumerate(memory_crystal.entries):
        angle = i * 0.8
        r = a + b * angle
        theta.append(angle)
        radius.append(r)
        labels.append(glyph)

    x = [r * np.cos(t) for r, t in zip(radius, theta)]
    y = [r * np.sin(t) for r, t in zip(radius, theta)]

    plt.figure(figsize=(8, 8))
    plt.scatter(x, y, s=100, alpha=0.8)

    for xi, yi, label in zip(x, y, labels):
        plt.text(xi, yi, label, fontsize=10, ha='center', va='center')

    plt.title("Spiral Codex Memory Map")
    plt.axis('off')
    plt.show()
